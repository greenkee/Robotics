// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2854.RobotBuilderTest;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DigitalInput armForwardLimitSwitch;
    public static DigitalInput armBackwardLimitSwitch;
    public static GearTooth armOpticalEncoder;
    public static Servo armArmMotor;
    public static SpeedController driveTrainFrontLeft;
    public static SpeedController driveTrainFrontRight;
    public static SpeedController driveTrainBackLeft;
    public static SpeedController driveTrainBackRight;
    public static RobotDrive driveTrainRobotDrive;
    public static AnalogChannel driveTrainIRDistanceSensor;
    public static SpeedController clawClawMotor;
    public static SpeedController pIDSubsystem1SpeedController1;
    public static Encoder pIDSubsystem1IndexedEncoder1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armForwardLimitSwitch = new DigitalInput(1, 1);
	LiveWindow.addSensor("Arm", "Forward Limit Switch", armForwardLimitSwitch);
        
        armBackwardLimitSwitch = new DigitalInput(1, 2);
	LiveWindow.addSensor("Arm", "Backward Limit Switch", armBackwardLimitSwitch);
        
        armOpticalEncoder = new GearTooth(1, 3, false);
	LiveWindow.addSensor("Arm", "Optical Encoder", armOpticalEncoder);
        
        armArmMotor = new Servo(1, 5);
	LiveWindow.addActuator("Arm", "Arm Motor", armArmMotor);
        
        driveTrainFrontLeft = new Victor(1, 1);
	LiveWindow.addActuator("Drive Train", "Front Left", (Victor) driveTrainFrontLeft);
        
        driveTrainFrontRight = new Victor(1, 2);
	LiveWindow.addActuator("Drive Train", "Front Right", (Victor) driveTrainFrontRight);
        
        driveTrainBackLeft = new Victor(1, 3);
	LiveWindow.addActuator("Drive Train", "Back Left", (Victor) driveTrainBackLeft);
        
        driveTrainBackRight = new Victor(1, 4);
	LiveWindow.addActuator("Drive Train", "Back Right", (Victor) driveTrainBackRight);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainFrontLeft, driveTrainBackLeft,
              driveTrainFrontRight, driveTrainBackRight);
	
        driveTrainRobotDrive.setSafetyEnabled(false);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainIRDistanceSensor = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Drive Train", "IR Distance Sensor", driveTrainIRDistanceSensor);
        
        clawClawMotor = new Victor(1, 6);
	LiveWindow.addActuator("Claw", "Claw Motor", (Victor) clawClawMotor);
        
        pIDSubsystem1SpeedController1 = new Victor(1, 7);
	LiveWindow.addActuator("PID Subsystem 1", "Speed Controller 1", (Victor) pIDSubsystem1SpeedController1);
        
        pIDSubsystem1IndexedEncoder1 = new Encoder(1, 4, 1, 5, 1, 6, false);
	LiveWindow.addSensor("PID Subsystem 1", "Indexed Encoder 1", pIDSubsystem1IndexedEncoder1);
        pIDSubsystem1IndexedEncoder1.setDistancePerPulse(1.0);
        pIDSubsystem1IndexedEncoder1.setPIDSourceParameter(PIDSourceParameter.kRate);
        pIDSubsystem1IndexedEncoder1.start();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
